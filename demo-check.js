#!/usr/bin/env node

import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = colors.cyan) {
  console.log(`${color}${message}${colors.reset}`);
}

async function checkPrerequisites() {
  console.log(`
üé¨ ===============================================
   D√âMO KAFKA - V√âRIFICATION DES PR√âREQUIS
===============================================
`);

  const checks = [];

  // V√©rifier Node.js
  try {
    const { stdout } = await execAsync('node --version');
    const version = stdout.trim();
    const majorVersion = parseInt(version.slice(1).split('.')[0]);
    
    if (majorVersion >= 18) {
      checks.push({ name: 'Node.js', status: 'OK', detail: version, color: colors.green });
    } else {
      checks.push({ name: 'Node.js', status: 'WARN', detail: `${version} (recommand√©: 18+)`, color: colors.yellow });
    }
  } catch (error) {
    checks.push({ name: 'Node.js', status: 'ERROR', detail: 'Non install√©', color: colors.red });
  }

  // V√©rifier Docker
  try {
    const { stdout } = await execAsync('docker --version');
    checks.push({ name: 'Docker', status: 'OK', detail: stdout.trim(), color: colors.green });
  } catch (error) {
    checks.push({ name: 'Docker', status: 'ERROR', detail: 'Non install√© ou non d√©marr√©', color: colors.red });
  }

  // V√©rifier les ports
  const ports = [3000, 3001, 3002, 3003, 3004, 9090, 9092];
  const portResults = [];

  for (const port of ports) {
    try {
      await execAsync(`lsof -i :${port}`);
      portResults.push({ port, status: 'OCCUP√â', color: colors.yellow });
    } catch (error) {
      portResults.push({ port, status: 'LIBRE', color: colors.green });
    }
  }

  // V√©rifier curl
  try {
    await execAsync('curl --version');
    checks.push({ name: 'curl', status: 'OK', detail: 'Disponible', color: colors.green });
  } catch (error) {
    checks.push({ name: 'curl', status: 'WARN', detail: 'Non install√© (optionnel)', color: colors.yellow });
  }

  // Afficher les r√©sultats
  console.log('üìã V√âRIFICATION DES COMPOSANTS:');
  checks.forEach(check => {
    const status = check.status.padEnd(5);
    log(`   ${check.name.padEnd(10)} [${status}] ${check.detail}`, check.color);
  });

  console.log('\nüîå V√âRIFICATION DES PORTS:');
  portResults.forEach(result => {
    const status = result.status.padEnd(6);
    log(`   Port ${result.port.toString().padEnd(4)} [${status}]`, result.color);
  });

  // Recommandations
  console.log('\nüí° RECOMMANDATIONS POUR LA D√âMO:');
  
  const hasErrors = checks.some(c => c.status === 'ERROR');
  const hasOccupiedPorts = portResults.some(p => p.status === 'OCCUP√â');

  if (hasErrors) {
    log('   ‚ùå Corriger les erreurs critiques avant la d√©mo', colors.red);
  }

  if (hasOccupiedPorts) {
    log('   ‚ö†Ô∏è  Certains ports sont occup√©s. Si ce sont vos services, c\'est normal.', colors.yellow);
    log('      Sinon, lib√©rer les ports ou red√©marrer les services existants.', colors.yellow);
  }

  if (!hasErrors && !hasOccupiedPorts) {
    log('   ‚úÖ Syst√®me pr√™t pour la d√©monstration !', colors.green);
  }

  console.log(`
üéØ √âTAPES DE D√âMO RECOMMAND√âES:
   1. Ouvrir les onglets navigateur AVANT de commencer
   2. Terminal avec police lisible (14pt minimum)
   3. npm start (d√©marrage complet)
   4. Attendre que tous les services soient verts
   5. npm run demo (test de charge)
   6. Montrer Grafana en temps r√©el

üìù URLs √† ouvrir dans le navigateur:
   ‚Ä¢ Grafana:    http://localhost:3000 (admin/admin)
   ‚Ä¢ Prometheus: http://localhost:9090
   ‚Ä¢ Services:   http://localhost:3001-3004

üöÄ Commande de d√©marrage: npm start
üìä Test de charge:       npm run demo

===============================================
Bonne d√©monstration ! üéâ
`);
}

checkPrerequisites().catch(error => {
  log(`‚ùå Erreur lors de la v√©rification: ${error.message}`, colors.red);
  process.exit(1);
});